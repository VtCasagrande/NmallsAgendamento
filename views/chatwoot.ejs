<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Agendamento de Mensagens | Chatwoot</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Custom CSS -->
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
      padding: 0;
      margin: 0;
      background-color: #f8f9fa;
    }
    .container-fluid {
      padding: 1rem;
    }
    .card {
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      margin-bottom: 1rem;
    }
    .card-header {
      background-color: #1f93ff;
      color: white;
      border-radius: 8px 8px 0 0 !important;
      padding: 0.75rem 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .form-control:focus {
      border-color: #1f93ff;
      box-shadow: 0 0 0 0.25rem rgba(31, 147, 255, 0.25);
    }
    .btn-primary {
      background-color: #1f93ff;
      border-color: #1f93ff;
    }
    .btn-primary:hover {
      background-color: #0d86ff;
      border-color: #0d86ff;
    }
    .contact-info {
      background-color: #e9f5ff;
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    .contact-info h5 {
      color: #1f93ff;
      margin-bottom: 0.5rem;
    }
    .nav-link {
      color: white;
      text-decoration: none;
    }
    .nav-link:hover {
      color: rgba(255, 255, 255, 0.8);
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <div id="contactInfo" class="contact-info d-none">
      <h5><i class="fas fa-user-circle me-2"></i>Informações do Contato</h5>
      <div class="row">
        <div class="col-md-6">
          <p class="mb-1"><strong>Nome:</strong> <span id="contactName">-</span></p>
          <p class="mb-1"><strong>Telefone:</strong> <span id="contactPhone">-</span></p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Email:</strong> <span id="contactEmail">-</span></p>
          <p class="mb-1"><strong>ID:</strong> <span id="contactId">-</span></p>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-header">
        <h5 class="mb-0"><i class="fas fa-calendar-alt me-2"></i>Agendar Mensagem</h5>
        <a href="/mensagens" class="nav-link">
          <i class="fas fa-external-link-alt me-1"></i>Menu Principal
        </a>
      </div>
      <div class="card-body">
        <form id="agendamentoForm">
          <div class="mb-3">
            <label for="nome" class="form-label">Nome</label>
            <input 
              type="text" 
              class="form-control" 
              id="nome" 
              name="nome" 
              required
            >
          </div>

          <div class="mb-3">
            <label for="telefone" class="form-label">Telefone</label>
            <div class="input-group">
              <span class="input-group-text">+55</span>
              <input 
                type="text" 
                class="form-control telefone" 
                id="telefone" 
                name="telefone" 
                placeholder="(99) 99999-9999"
                required
              >
            </div>
            <div class="form-text">
              Formato: (99) 99999-9999
            </div>
          </div>

          <div class="mb-3">
            <label for="mensagem" class="form-label">Mensagem</label>
            <textarea 
              class="form-control" 
              id="mensagem" 
              name="mensagem" 
              rows="3" 
              maxlength="500" 
              required
            ></textarea>
            <div class="form-text">
              <span id="contador">0</span>/500 caracteres
            </div>
          </div>

          <div class="mb-3">
            <label for="responsavel" class="form-label">Responsável</label>
            <input 
              type="text" 
              class="form-control" 
              id="responsavel" 
              name="responsavel" 
              required
            >
          </div>

          <div class="mb-3">
            <label for="dataAgendamento" class="form-label">Data de Agendamento</label>
            <input 
              type="date" 
              class="form-control" 
              id="dataAgendamento" 
              name="dataAgendamento" 
              required
            >
            <div class="alert alert-info mt-2 mb-0">
              <i class="fas fa-info-circle me-2"></i>
              <strong>Informação:</strong> O fluxo roda às 9h da manhã. Agendamentos para o mesmo dia serão processados imediatamente.
            </div>
          </div>

          <div class="d-grid">
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save me-1"></i> Agendar Mensagem
            </button>
          </div>
        </form>
      </div>
    </div>

    <div id="mensagemSucesso" class="alert alert-success d-none">
      <i class="fas fa-check-circle me-2"></i> Mensagem agendada com sucesso!
    </div>

    <div id="mensagemErro" class="alert alert-danger d-none">
      <i class="fas fa-exclamation-circle me-2"></i> <span id="erroTexto"></span>
    </div>
  </div>

  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- jQuery Mask Plugin -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.min.js"></script>
  <!-- Bootstrap JS Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      try {
        // Verificar se o acesso vem do Chatwoot ou se o usuário está autenticado
        const isFromChatwoot = <%= isFromChatwoot ? 'true' : 'false' %>;
        const usuarioAutenticado = <%= usuario ? 'true' : 'false' %>;
        
        // Se não vier do Chatwoot e não estiver autenticado, redirecionar para login
        if (!isFromChatwoot && !usuarioAutenticado) {
          window.location.href = '/login?redirect=/chatwoot';
          return;
        }

        // Função para formatar a data no formato aceito pelo input date
        function formatarDataParaInput(data) {
          const ano = data.getFullYear();
          const mes = String(data.getMonth() + 1).padStart(2, '0');
          const dia = String(data.getDate()).padStart(2, '0');
          
          return `${ano}-${mes}-${dia}`;
        }
        
        // Definir data mínima como hoje
        const hoje = new Date();
        const dataMinima = formatarDataParaInput(hoje);
        
        const dataAgendamentoInput = document.getElementById('dataAgendamento');
        if (dataAgendamentoInput) {
          dataAgendamentoInput.setAttribute('min', dataMinima);
          dataAgendamentoInput.value = dataMinima;
        }

        // Inicializar máscara para o campo de telefone se jQuery estiver disponível
        if (typeof $ !== 'undefined' && $.fn && $.fn.mask) {
          $('.telefone').mask('(00) 00000-0000', {
            placeholder: '(99) 99999-9999'
          });
        }

        // Contador de caracteres para o campo de mensagem
        const mensagemTextarea = document.getElementById('mensagem');
        const contador = document.getElementById('contador');

        if (mensagemTextarea && contador) {
          mensagemTextarea.addEventListener('input', function() {
            contador.textContent = this.value.length;
          });
        }

        // Listener para receber dados do Chatwoot
        function handleChatwootMessage(event) {
          try {
            if (!event.data) return;
            
            let eventData;
            if (typeof event.data === 'string') {
              eventData = JSON.parse(event.data);
            } else {
              eventData = event.data;
            }
            
            if (eventData.event === "appContext") {
              const conversation = eventData.data.conversation;
              const contact = eventData.data.contact;
              const currentAgent = eventData.data.currentAgent;
              
              // Preencher informações do contato
              if (contact) {
                const contactInfo = document.getElementById('contactInfo');
                if (contactInfo) contactInfo.classList.remove('d-none');
                
                const contactName = document.getElementById('contactName');
                if (contactName) contactName.textContent = contact.name || '-';
                
                const contactPhone = document.getElementById('contactPhone');
                if (contactPhone) contactPhone.textContent = contact.phone_number || '-';
                
                const contactEmail = document.getElementById('contactEmail');
                if (contactEmail) contactEmail.textContent = contact.email || '-';
                
                const contactId = document.getElementById('contactId');
                if (contactId) contactId.textContent = contact.id || '-';
                
                // Preencher automaticamente o formulário
                const nomeInput = document.getElementById('nome');
                if (nomeInput && contact.name) nomeInput.value = contact.name;
                
                const telefoneInput = document.getElementById('telefone');
                if (telefoneInput && contact.phone_number) {
                  // Processar o número de telefone corretamente
                  let phone = contact.phone_number.replace(/\D/g, '');
                  
                  // Remover o código do país se já estiver presente
                  if (phone.startsWith('55') && phone.length > 10) {
                    phone = phone.substring(2);
                  }
                  
                  // Formatar o número no padrão brasileiro
                  if (phone.length >= 10) {
                    const formattedPhone = phone.length === 11 
                      ? `(${phone.substring(0, 2)}) ${phone.substring(2, 7)}-${phone.substring(7)}`
                      : `(${phone.substring(0, 2)}) ${phone.substring(2, 6)}-${phone.substring(6)}`;
                    telefoneInput.value = formattedPhone;
                  } else {
                    // Se não conseguir formatar, usar o número original
                    telefoneInput.value = contact.phone_number;
                  }
                }
              }
              
              // Preencher o campo de responsável com o nome do agente atual
              const responsavelInput = document.getElementById('responsavel');
              if (responsavelInput && currentAgent && currentAgent.name) {
                responsavelInput.value = currentAgent.name;
              }
            }
          } catch (error) {
            console.error("Erro ao processar mensagem do Chatwoot:", error);
          }
        }

        // Adicionar o listener de mensagens
        window.addEventListener("message", handleChatwootMessage);

        // Solicitar dados do Chatwoot ao carregar a página
        setTimeout(function() {
          try {
            window.parent.postMessage('chatwoot-dashboard-app:fetch-info', '*');
          } catch (error) {
            console.error("Erro ao solicitar dados do Chatwoot:", error);
          }
        }, 1000);

        // Envio do formulário
        const agendamentoForm = document.getElementById('agendamentoForm');
        if (agendamentoForm) {
          agendamentoForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Obter a data exatamente como foi selecionada pelo usuário
            const dataInput = document.getElementById('dataAgendamento').value;
            const nomeInput = document.getElementById('nome').value;
            const telefoneInput = document.getElementById('telefone').value;
            const mensagemInput = document.getElementById('mensagem').value;
            const responsavelInput = document.getElementById('responsavel').value;
            
            const formData = {
              nome: nomeInput,
              telefone: telefoneInput,
              mensagem: mensagemInput,
              responsavel: responsavelInput,
              dataAgendamento: dataInput // Enviar exatamente como foi selecionado
            };
            
            console.log('Data selecionada pelo usuário:', dataInput);
            
            // Validar telefone
            const telefoneRegex = /^\(\d{2}\)\s\d{4,5}-\d{4}$/;
            if (!telefoneRegex.test(formData.telefone)) {
              const mensagemErro = document.getElementById('mensagemErro');
              const erroTexto = document.getElementById('erroTexto');
              
              if (mensagemErro) mensagemErro.classList.remove('d-none');
              if (erroTexto) erroTexto.textContent = 'Telefone inválido. Use o formato (99) 99999-9999';
              return;
            }
            
            // Validar data de agendamento
            const dataAgendamento = new Date(dataInput);
            const agoraValidacao = new Date();
            agoraValidacao.setHours(0, 0, 0, 0); // Zerar horas, minutos, segundos e milissegundos
            
            if (dataAgendamento < agoraValidacao) {
              const mensagemErro = document.getElementById('mensagemErro');
              const erroTexto = document.getElementById('erroTexto');
              
              if (mensagemErro) mensagemErro.classList.remove('d-none');
              if (erroTexto) erroTexto.textContent = 'A data de agendamento deve ser hoje ou no futuro';
              return;
            }
            
            // Enviar para a API usando fetch em vez de jQuery
            fetch('/api/mensagens', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-From-Chatwoot': isFromChatwoot ? 'true' : 'false'
              },
              body: JSON.stringify(formData)
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('Erro ao enviar mensagem');
              }
              return response.json();
            })
            .then(data => {
              const mensagemSucesso = document.getElementById('mensagemSucesso');
              const mensagemErro = document.getElementById('mensagemErro');
              
              if (mensagemSucesso) mensagemSucesso.classList.remove('d-none');
              if (mensagemErro) mensagemErro.classList.add('d-none');
              
              // Resetar o formulário
              agendamentoForm.reset();
              
              // Definir data mínima novamente
              const hoje = new Date();
              const dataMinima = formatarDataParaInput(hoje);
              
              const dataAgendamentoInput = document.getElementById('dataAgendamento');
              if (dataAgendamentoInput) dataAgendamentoInput.value = dataMinima;
              
              // Esconder mensagem de sucesso após 3 segundos
              setTimeout(() => {
                if (mensagemSucesso) mensagemSucesso.classList.add('d-none');
              }, 3000);
            })
            .catch(error => {
              const mensagemErro = document.getElementById('mensagemErro');
              const erroTexto = document.getElementById('erroTexto');
              const mensagemSucesso = document.getElementById('mensagemSucesso');
              
              if (mensagemErro) mensagemErro.classList.remove('d-none');
              if (mensagemSucesso) mensagemSucesso.classList.add('d-none');
              if (erroTexto) erroTexto.textContent = 'Erro ao agendar mensagem. Tente novamente.';
              
              console.error('Erro:', error);
            });
          });
        }
      } catch (error) {
        console.error("Erro geral na inicialização:", error);
      }
    });
  </script>
</body>
</html> 